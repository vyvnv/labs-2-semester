#include <stdio.h>
#include <stdlib.h>
#include <locale.h>
#include <time.h>	


void Swap(int* mas, int i); // вводим прототип функции обмена значений элементов массива


bool IsSorted(int *p, size_t N) // функция проверки на упорядоченность
{
	if (p == NULL) // проверка на наличие выделенной памяти
		return false;
	for (int i = 0; i < N - 1; ++i) 
  {
		if (p[i] > p[i + 1]) // если в массиве нашли неупорядоченный элемент,
			return false;
  }
	return true;
}

int* Copy(int* p, size_t N) { // функция создания копии массива
	int* copy = (int*)calloc(N, sizeof(int));
  
	if (copy)
	{
		for (int i = 0; i < N; i++) 
		{
			copy[i] = p[i];
		}
		return copy;
	}
	return nullptr;
}

// функция создания динамического массива в заданном диапазоне аргументами в виде размера одной ячейки и макс и мин значений диапазона

int* newArray(size_t N, int Min, int Max) 
{
	int* p = (int*)calloc(N, sizeof(int));
	if (p) //если память заданного размера удалось выделить, массив заполняется значениями
	{ 
		for (int i = 0; i < N; ++i) 
		{
			p[i] = Min + (rand() % Max-Min+1);
		}
		return p;
	}
	return NULL;
} 

int* selectionSort(int *p, size_t N) // прямой выбор
{
	if (p == NULL) 
		return nullptr;
	printf("Прямой выбор: ");
		
	int x; // переменная для хранения крайнего элемента отсортированной части
	int tmp;
	for (int i = 0; i < N; ++i)
	{
		x = i;

		for (int j = i + 1; j < N; ++j) 
		{
			if (p[j] < p[x])
				x = j;
		}

		tmp = p[i];
		p[i] = p[x];
		p[x] = tmp;
	}
		return p;
}


int* InsertionSort(int* p, size_t N) //прямая вставка
{
	if (p == NULL) return nullptr;
	printf("Прямая вставка: ");

	int i, j, x = 0, tmp = 0;
	for (i = 0; i < N - 1; i++) 
	{
		x = i + 1; 
		tmp = p[x]; 
		for (j = i + 1; j > 0; j--)
		{
			if (tmp < p[j - 1])
			{
				p[j] = p[j - 1];
				x = j - 1;
			}
		}
		p[x] = tmp;
	} 	
	return p;
}

void Swap(int* mas, int i) { // функция для обмена значений в Шейкерной сортировке
	int tmp;
	tmp = mas[i];
	mas[i] = mas[i - 1];
	mas[i - 1] = tmp;
}

int* ShakerSort(int* p, size_t N) // Шейкерная сортировка
{
	if (p == NULL) return nullptr;

	printf("Сортировка Шейкера: ");
	size_t leftMark = 1;
	size_t rightMark = N - 1;
	while (leftMark <= rightMark)
	{
		for (int i = rightMark; i >= leftMark; i--) {
			if (p[i - 1] > p[i])
				Swap(p, i);
		}
		leftMark++;

		for (int i = leftMark; i <= rightMark; i++) {
			if (p[i - 1] > p[i])
				Swap(p, i);
		}
		rightMark--;
	}
	return p;
}


void Print(int* p, size_t N)
{
	if (p)
	{
		for (int i = 0; i < N;i++) {
			printf("%d ", p[i]);

		}
		printf("\n");
	}
	else
		printf("Не получилось вывести массив\n");
}


int main() {
    setlocale(LC_ALL, "Russian");
	int N;
	printf("Количество элементов:");
	scanf_s("%d", &N);
	int* mas = NewArray(N, -11, 10);
	int* mas1 = Copy(mas, N);
	int* mas2 = Copy(mas, N);
	int* mas3 = Copy(mas, N);
	free(mas);


	clock_t start, stop; // объявляем переменные начала и конца замена времени

	//Print(mas1, N);
	start = clock(); // присв переменной замера времени значение кол-ва тактов от начала программы до этого момента
	SelectionSort(mas1, N); // сортировка прямым выбором первой копии
	stop = clock(); // замеряем конец сортировки
	printf("%d секунд\n", (stop - start) / CLOCKS_PER_SEC); // вычитаем от конца начало, делим на количество тактов(??)
	//Print(mas1, N);

	if (IsSorted(mas1, N)) 
		printf("Массив отсортирован\n\n");
	else 
		printf("Ошибка\n\n"); 
	free(mas1);

	//Print(mas2, N);
	start = clock();
	InsertionSort(mas2, N);
	stop = clock();
	printf("%d секунд\n", (stop - start) / CLOCKS_PER_SEC);
	//Print(mas2, N);

	if (IsSorted(mas2, N)) 
		printf("Массив отсортирован\n\n");
	else 
		printf("Ошибка\n\n");
	free(mas2);

	//Print(mas3, N);
	start = clock();
	ShakerSort(mas3, N);
	stop = clock();
	printf("%d секунд\n", (stop - start) / CLOCKS_PER_SEC);
	//Print(mas3, N);
	if (IsSorted(mas3, N)) 
		printf("Массив отсортирован\n\n");
	else 
		printf("Oшбибка\n\n");  
	free(mas3);

	return 0;
}
